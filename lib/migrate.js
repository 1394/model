'use strict'

const argv = require('minimist')(process.argv.slice(2))
const [mode, name, op1, op2] = argv._

const df = require('dateformat')
const fs = require('fs')
const path = require('path')
const Model = require('@dmitri.leto/model')
const Migrations = require('@dmitri.leto/model/migrations')
const cfg = require('./database.json').dev
Model.setConfig(cfg)
console.log('')

if (mode === 'dbcreate') {
  const Migration = new Migrations('migrations', {debug: true, serviceConn: true})
  const dbName = name || cfg.database
  Migration.createDb(dbName, {charset: op1, collate: op2})
    .then((result) => {
      console.log(result)
      process.exit(0)
    })
    .catch((err) => {
      console.error(err)
      process.exit(1)
    })
}

if (mode === 'up' && !name) {
  const Migration = new Model('migrations')
  let files = require('glob').sync('./migrations/*.js').map((file) => path.parse(file))
  if (!files.length) {
    console.log('hasn`t any migrations now')
    process.exit(0)
  }
  const check = async function() {
    let recs = []
    if (await Migration.exists()) {
      recs = await Migration.find().do()
    } else {
      await Migration.base.do(
        `CREATE TABLE migrations
          (name VARCHAR(255),
          id INT NOT NULL AUTO_INCREMENT,
          PRIMARY KEY(id),
          run_on datetime NOT NULL)
          ENGINE=InnoDB
          DEFAULT CHARSET=utf8
          COLLATE=utf8_unicode_ci
        `)
    }
    recs = recs.map((el) => el.name)
    files = files.filter((file) => !recs.includes(file.name))
    for (const module of files.map((el) => el.name).sort()) {
      try {
        const fn = require('./migrations/' + module)
        console.log('----------------')
        await fn.up()
        await Migration.insert().setFields({
          run_on: new Date(),
          name: module,
        }).do()
      } catch (ex) {
        console.error(ex)
        process.exit(1)
      }
    }
  }

  check().then(() => {
    process.exit(0)
  })
    .catch((err) => {
      console.error(err)
      process.exit(1)
    })
}

if (mode === 'down' && !name) {
  const Migration = new Model('migrations')
  const check = async function() {
    if (await Migration.exists()) {
      var rec = await Migration.find().order('name', false).doFirst()
      if (!rec) {
        console.log('migrations table is empty')
        process.exit()
      }
    } else {
      await Migration.base.do('CREATE TABLE `migrations` (`name` VARCHAR(255), `id` INT NOT NULL AUTO_INCREMENT, PRIMARY KEY(`id`), `run_on` datetime NOT NULL) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci')
        .then(() => {
          console.log('nothing to down by info from migrations table, just was created now')
          process.exit()
        })
    }
    const file = require('glob').sync('./migrations/*.js').map((file) => path.parse(file)).filter((el) => rec.name === el.name)[0]
    if (!file) {
      console.error(`the file 'migrations/${rec.name}'.js needed for the migration is not found`)
      process.exit(1)
    }
    try {
      const fn = require('./migrations/' + file.name)
      await fn.down()
      await Migration.delete().where('id = ?', rec.id).do()
      if (argv.rm) {
        fs.unlinkSync(path.join(file.dir, file.base))
        console.log('successfully removed : %s', file.base)
      }
    } catch (ex) {
      console.error(ex)
      process.exit(1)
    }
  }

  check().then((res) => {
    res && console.log(res)
    process.exit(0)
  })
    .catch((err) => {
      console.error(err)
      process.exit(1)
    })
}

if (mode === 'create' && name) {
  const fileName = df(new Date(), 'yyyy-mm-dd-HH-MM-ss-') + name
  const file = [
    '/**',
    '* autogenerated migration file',
    '*/',
    '\'use strict\'',
    'const Migrations = require(\'@dmitri.leto/model/migrations\')',
  ]
  const table = name.split('_').pop()
  file.push(`const Table = new Migrations('${table}', {debug: ${argv.hasOwnProperty('v')}})`)
  file.push('')
  file.push('async function up () {')
  file.push('  // await Table.[add|modify]Columns([')
  file.push('  //   [\'name\', \'type\', {}]')
  file.push('  // ]).[create|alter]()')
  file.push('}')
  file.push('')
  file.push('async function down () {')
  file.push('  // await Table.drop()')
  file.push('  // await Table.[add|modify]Columns([')
  file.push('  //   [\'name\', \'type\', {}]')
  file.push('  // ]).[create|alter]()')
  file.push('}')
  file.push('')
  file.push('module.exports = {up, down}\n')
  const migrationFile = path.join(process.cwd(), 'migrations', fileName + '.js')
  fs.writeFileSync(migrationFile, file.join('\n'), 'utf8', 'w')
  console.log('created migration file : ', migrationFile)
}
